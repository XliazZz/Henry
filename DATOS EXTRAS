//En JavaScript, puedes determinar el tipo de una variable o un valor con el operador typeof, de la siguiente manera:
 
typeof 3 === 'string'
typeof '3' === 'number'


//El operador de estricta desigualdad !== es el opuesto lógico del operador de estricta igualdad.

3 !==  3  // false
3 !== '3' // true
4 !==  3  // true


//La segunda manera de acceder a las propiedades de un objeto es con la notación de corchetes ([]). 
//Si la propiedad del objeto al que intentas acceder tiene un espacio en el nombre, necesitarás usar notación de corchetes.


//a función parseInt() analiza una cadena y devuelve un entero. A continuación, te presentamos un ejemplo:

const a = parseInt("007");
//La función anterior convierte la cadena 007 al entero 7. 
//Si el primer carácter de la cadena no puede ser convertido en un número, entonces devuelve NaN.



//El operador condicional, también llamado el operador ternario, 
//puede utilizarse como una expresión if-else de una sola línea.

unction findGreater(a, b) {
  if(a > b) {
    return "a is greater";
  }
  else {
    return "b is greater or equal";
  }
}

//Esto puede reescribirse usando el operador condicional:

function findGreater(a, b) {
  return a > b ? "a is greater" : "b is greater or equal";
}


// También puedes encadenarlos para comprobar múltiples condiciones.

//La siguiente función utiliza sentencias if, else if, y else para comprobar múltiples condiciones:

function findGreaterOrEqual(a, b) {
  if (a === b) {
    return "a and b are equal";
  }
  else if (a > b) {
    return "a is greater";
  }
  else {
    return "b is greater";
  }
}


//La función anterior puede ser reescrita utilizando múltiples operadores condicionales:

function findGreaterOrEqual(a, b) {
  return (a === b) ? "a and b are equal" 
    : (a > b) ? "a is greater" 
    : "b is greater";
}



//la declaración const por sí sola no protege la información de la mutación. 
//Para asegurar que tu información no cambie, JavaScript provee una función Object.freeze para prevenir la mutación de datos.

let obj = {
  name:"FreeCodeCamp",
  review:"Awesome"
};
Object.freeze(obj);
obj.review = "bad";
obj.newProp = "Test";
console.log(obj); 


//Las asignaciones obj.review y obj.newProp provocarán errores, y la consola mostrará el valor { name: "FreeCodeCamp", review: "Awesome" }.



//Creamos funciones inline (en línea). No necesitamos nombrar estas funciones porque no las reutilizamos en otro lugar.

const myFunc = () => {
  const myVar = "value";
  return myVar;
}


//HAY QUE USAR CONST

//Cuando la función no posee cuerpo y sólo tiene un valor de retorno, la sintaxis de "función de flecha", te permite omitir la palabra clave return, 
//así como los corchetes que rodean el código. Esto ayuda a simplificar las funciones más pequeñas en sentencias de una sola línea:

const myFunc = () => "value";

//Este código todavía devolverá la cadena value por defecto.


//Funciones flecha con parámetros

//HAY QUE USAR CONST

const doubler = (item) => item * 2;
doubler(4);

//doubler(4) devolvería el valor 8.

//Si una función flecha tiene un solo parámetro, los paréntesis que encierran el parámetro pueden ser omitidos.

const doubler = item => item * 2;

//Es posible pasar más de un argumento a una función flecha.

const multiplier = (item, multi) => item * multi;
multiplier(4, 2);
multiplier(4, 2) devolverá el valor 8.



// ES6 introduce parametros por defecto para funciones.

const greeting = (name = "Anonymous") => "Hello " + name;

console.log(greeting("John"));
console.log(greeting());

//La consola mostrará las cadenas Hello John y Hello Anonymous.
//El parámetro por defecto entra en juego cuando el argumento no es especificado (es indefinido). 
//Como puedes ver en el ejemplo, el parámetro name recibirá su valor por defecto Anonymous cuando no proveas un valor para el parámetro. 



// ES6 introduce el parámetro rest para los parámetros de función. Con el parámetro rest, puedes crear funciones que tomen un número variable de argumentos.
//'...' es el rest

function howMany(...args) {
  return "You have passed " + args.length + " arguments.";
}
console.log(howMany(0, 1, 2));
console.log(howMany("string", null, [1, 2, 3], { }));
//La consola mostrará las cadenas You have passed 3 arguments. y You have passed 4 arguments..


//ES6 introduce el operador de propagación, que nos permite expandir arreglos y otras expresiones en lugares donde se esperan múltiples parámetros o elementos.

//Para calcular el valor máximo en un arreglo y otras cosas se usa el operador de propagación:

const arr = [6, 89, 3, 45];
const maximus = Math.max(...arr);

//maximus tendría un valor de 89.



//Copia todo el contenido de arr1 en otro arreglo arr2 usando el operador de propagación.

const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;

arr2 = [...arr1]; 

console.log(arr2);




//SINTAXIS DE DESESTRUCTURACION PARA EXTRAR VALORES DE OBJETOS

//Considera el siguiente código:

const user = { name: 'John Doe', age: 34 };

const name = user.name;
const age = user.age;

//name tendría una cadena con valor John Doe, y age tendría el número 34.

//Aquí hay una sentencia de asignación equivalente usando la sintaxis de desestructuración de ES6:

const { name, age } = user;

//De nuevo, name tendrá una cadena con valor John Doe, y age tendrá el número 34.
//Esta es una forma mucho mas limpia de extraer los valores del objeto sin necesidad de do-notation u bracket-notation.


//ASIGNAR VALORES DE OBJETOS A VARIABLES CON SINTAXIS DE DESESTRUCTURACION.

//Puedes hacer esto al poner el nuevo nombre después de dos puntos al asignar el valor.

//Usando el mismo objeto del ejemplo anterior:

const user = { name: 'John Doe', age: 34 };

//Así es como puedes dar nuevos nombres de variables en la asignación:

const { name: userName, age: userAge } = user;

//En la variable userName quedara el valor 'John Doe' y viceversa con la edad.


//SINTAXIS DE DESESTRUCTURACION/DESEMPAQUETADO PARA ASIGNAR VARIABLES DESDE OBJETOS ANIDADOS

//Usando un objeto similar a los ejemplos anteriores:

const user = {
  johnDoe: { 
    age: 34,
    email: 'johnDoe@freeCodeCamp.com'
  }
};

//Así es como se extraen los valores de propiedades de objetos y se los asigna a variables con el mismo nombre:

const { johnDoe: { age, email }} = user;

//Y así es como se puede asignar los valores de las propiedades de un objeto a variables con diferentes nombres:

const { johnDoe: { age: userAge, email: userEmail }} = user;

























